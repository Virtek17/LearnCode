import PropTypes from "prop-types";
import { useParams } from "@vkontakte/vk-mini-apps-router";
import { Button, Panel, PanelHeader, Tabbar } from "@vkontakte/vkui";
import { useRouteNavigator } from "@vkontakte/vk-mini-apps-router";

import Markdown from "markdown-to-jsx";
import hljs from "highlight.js";
import "highlight.js/styles/atom-one-dark.css";

import { useEffect } from "react";
import { Icon24ChevronLeftOutline } from "@vkontakte/icons";
import clsx from "clsx";

import MainContainer from "../Components/MainContainer/MainContainer";
import MyTabbar from "../Components/MyTabbar/MyTabbar";
import "../styles/TheoryTopic.css";
import { useAppearance } from "@vkontakte/vk-bridge-react";
import { BlockedModal } from "../Components/BlockedModal/BlockedModal";

// –∑–∞–≥–ª—É—à–∫–∞
const mockTheoryByTopic = {
  div: {
    title: "div",
    content: `
–ß—Ç–æ —Ç–∞–∫–æ–µ \`<div>\`

—ç—Ç–æ –ø—Ä—Å—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –¢–∞–∫–æ–π —Å–µ–±–µ –ø—É—Å—Ç–æ–π –±–ª–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–∫–ª–¥—ã–≤–∞–µ—à—å –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
–ù—É–∂–µ–Ω, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 
    `,
    example: `
<div>–ö–æ–Ω—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ div </div>
    `,
    lang: "html",
  },

  p: {
    title: "p",
    content: `
\`<p>\` - —ç—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ. –ü—Ä–æ—Å—Ç–æ –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞. –ë—Ä–∞—É–∑–µ—Ä —Å–∞–º –¥–æ–±–∞–≤–∏—Ç –æ—Ç—Å—É–ø—ã —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É.
`,
    example: `
<p>–≠—Ç–æ –∞–±–∑–∞—Ü</p>
    `,
    lang: "html",
  },

  span: {
    title: "span",
    content: `
\`<span>\` - –º–∏–Ω–∏ –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫—É—Å–æ—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∫–æ–∏.
`,
    example: `
<p>–≠—Ç–æ <span>–≤–∞–∂–Ω–æ–µ</span> —Å–ª–æ–≤–æ</p>
    `,
    lang: "html",
  },

  img: {
    title: "img",
    content: `
\`<img />\` - –≤—Å–∞—Ç–∞–≤—è–ª–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
`,
    example: `
<img scr="–∫–∞–±–∞–Ω.jpg" alt="–í–µ—Å–µ–ª—ã–π –∫–∞–±–∞–Ω"/> 
    `,
    lang: "html",
  },

  h1: {
    title: "h1",
    content: `
\`<h1>\` - –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, 
\`<h6>\` - —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π. –û–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
`,
    example: `
<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è</h1>
<h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è</h2> 
    `,
    lang: "html",
  },

  a: {
    title: "a",
    content: `
\`<a>\` - –¥–µ–ª–∞–µ—Ç —Å—Å—ã–ª–∫—É. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ href. \n
PS: –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ - –¥–æ–±–∞–≤–∏—Ç—å \`target="_blank"\` 
`,
    example: `
<a href="https://example.com">–ü–µ—Ä–µ–π—Ç–∏</a>
    `,
    lang: "html",
  },

  header: {
    title: "header",
    content: `
\`header\` - —ç—Ç–æ —à–∞–ø–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –û–±—ã—á–Ω–æ –≤ –Ω—ë–º –ª–æ–≥–æ—Ç–∏–∏–ø, –Ω–∞–∑–≤–∞–Ω–∏–µ, –º–µ–Ω—é
    `,
    example: `
<header>
  <img src="logo.png"/>
  <nav>–ù–∞–≤–∏–≥–∞—Ü–∏—è</nav>
  <button>–ö–Ω–æ–ø–∫–∞</button>
</header>
    `,
    lang: "html",
  },

  main: {
    title: "main",
    content: `
\`<main>\` - —ç—Ç–æ —Ç–æ, —Ä–∞–¥–∏ —á–µ–≥–æ –ø—Ä–∏—à–µ–ª –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å. –ó–¥–µ—Å—å –≤–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç. –û–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É. 
    `,
    example: `
<main>–¢—É—Ç –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ<main/>
    `,
    lang: "html",
  },

  footer: {
    title: "footer",
    content: `
\`<footer>\` - –ø–æ–¥–≤–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–∞–º –æ–±—ã—á–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Å—Å—ã–ª–∫–∏, –∫–æ–ø–∏—Ä–∞–π—Ç
    `,
    example: `
<footer¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</footer>
    `,
    lang: "html",
  },

  article: {
    title: "article",
    content: `
\`<article>\` - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –≠—Ç–æ –∫–∞–∫ –æ—Ç–µ–¥–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: –Ω–æ–≤–æ—Å—Ç—å, –ø–æ—Å—Ç, –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞–∞—Ä–∞. \n
–ï—Å–ª–∏ –±–ª–æ–∫ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —ç—Ç–æ <artice>
    `,
    example: `
<article>
    <h2>–ù–æ–≤–æ—Å—Ç–∏</h2>
    <p>–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ...</p>
</article>
    `,
    lang: "html",
  },

  section: {
    title: "section",
    content: `
\`<section>\` - –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–∏–ø "–û –Ω–∞—Å", "–û—Ç–∑—ã–≤—ã" –∏ —Ç.–¥. \n
PS: –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–º—ã—Å–ª—ã - section —Ç–µ–±—è –≤—ã—Ä—É—á–∏—Ç
    `,
    example: `
<section>
  <h2>–û—Ç–∑—ã–≤—ã</h2>
  <div>–ö–∞–∫–∏–µ-—Ç–æ –æ—Ç–∑—ã–≤—ã...</div>
</section>
    `,
    lang: "html",
  },

  aside: {
    title: "aside",
    content: `
\`<aside>\` - —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞: —Å–∞–π–¥–±–∞—Ä, —Å–æ–≤–µ—Ç—ã, —Å—Å—ã–ª–∫–∏. \n
PS: –ø–æ–±–æ—á–Ω—ã–π –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç? –°–ø—Ä—è—á—å –µ–≥–æ–≤ aside
    `,
    example: `
<aside>–ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç!</aside>
    `,
    lang: "html",
  },

  position: {
    title: "position",
    content: `
–°–≤–æ–π—Å—Ç–≤–æ position –¥–µ–ª–∞–µ—Ç –ª–∞ –ª–∞ –ª–∞
    `,
    example: `
.class-root {
    position: absolute
}

.class-chid {
    position: relative
}
    `,
    lang: "css",
  },

  flex: {
    title: "flex",
    content: `
–°–≤–æ–π—Å—Ç–≤–æ flex –¥–µ–ª–∞–µ—Ç –ª–∞ –ª–∞ –ª–∞
    `,
    example: `
function = () => {
  for (let i; i < 10; i++) {
    let a = i;
  }  
}
    `,
    lang: "javascript",
  },
};

export const TheoryTopic = ({ id }) => {
  const appearance = useAppearance();
  const { topic } = useParams();
  const theory = mockTheoryByTopic[topic];
  const routeNavigator = useRouteNavigator();

  useEffect(() => {
    document.querySelectorAll("pre code").forEach((block) => {
      hljs.highlightElement(block);
    });
  }, [theory]);

  if (!theory) {
    return (
      <Panel id={id}>
        <PanelHeader>–û—à–∏–±–∫–∞</PanelHeader>
        <MainContainer>
          <BlockedModal />
        </MainContainer>
        <Tabbar>
          <MyTabbar />
        </Tabbar>
      </Panel>
    );
  }

  return (
    <Panel id={id}>
      <PanelHeader>{theory.title}</PanelHeader>

      <div style={{ padding: 16 }}>
        <div
          className={clsx({
            ["btn-back__light"]: appearance === "light",
            ["btn-back__dark"]: appearance !== "light",
          })}
        >
          <Button
            onClick={() => routeNavigator.back()}
            before={<Icon24ChevronLeftOutline />}
            mode="link"
            size="l"
          >
            <span className={clsx("btn")}>–ù–∞–∑–∞–¥</span>
          </Button>
        </div>
        <Markdown
          options={{
            overrides: {
              pre: {
                component: ({ children, ...props }) => (
                  <pre
                    style={{
                      backgroundColor: "#1e1e1e",
                      padding: "12px",
                      borderRadius: "10px",
                      overflowX: "auto",
                      marginTop: "12px",
                    }}
                    {...props}
                  >
                    {children}
                  </pre>
                ),
              },
              code: {
                component: ({ className, children, ...props }) => (
                  <code className={className} {...props}>
                    {children}
                  </code>
                ),
              },
              h4: {
                component: (props) => (
                  <h4
                    style={{
                      fontSize: "20px",
                      marginTop: "24px",
                      fontFamily: "SFProText",
                      fontWeight: "600",
                    }}
                    {...props}
                  />
                ),
              },
              p: {
                component: (props) => (
                  <p
                    style={{
                      fontSize: "16px",
                      lineHeight: "1.5em",
                      fontFamily: "SFProText",
                      fontWeight: "400",
                    }}
                    {...props}
                  />
                ),
              },
            },
          }}
        >
          {theory.content}
        </Markdown>

        {theory.example && (
          <div style={{ marginTop: 24 }}>
            <h4>üß† –ü—Ä–∏–º–µ—Ä:</h4>
            <pre
              style={{
                backgroundColor: "#24292E",
                color: "#0080FF",
                padding: "12px",
                borderRadius: "8px",
                fontSize: 18,
                overflowX: "auto",
              }}
            >
              <code className={`language-${theory.lang || "html"}`}>
                {theory.example}
              </code>
            </pre>
          </div>
        )}
      </div>
      <Tabbar>
        <MyTabbar />
      </Tabbar>
    </Panel>
  );
};

TheoryTopic.propTypes = {
  id: PropTypes.string.isRequired,
};
